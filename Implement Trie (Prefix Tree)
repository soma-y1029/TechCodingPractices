https://leetcode.com/problems/implement-trie-prefix-tree/
class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.word_dict = dict()
        self.end = '#'
        

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        root = self.word_dict
        for ch in word: # look for all words
            if ch not in root: # if not, create new empty dict in it 
                root[ch] = dict()
            root = root[ch] # look for new root dict
            
        root[self.end] = True # this word can end at here 

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        root = self.word_dict
        for ch in word: 
            if ch in root: root = root[ch] # look for next level
            else: return False 
            
        if self.end in root: return True # check if this word can end at this letter level
        return False # else this is only prefix, return false

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        root = self.word_dict
        for ch in prefix: 
            if ch in root: root = root[ch] # look for next letter level
            else: return False # no letter exits at this letter level 
        return True # w/t any check, after the all check of prefix, return true
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
